//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackEnd_API
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CentralDepKeyStageEntities : DbContext
    {
        public CentralDepKeyStageEntities()
            : base("name=CentralDepKeyStageEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Airline> Airlines { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Journal> Journals { get; set; }
        public virtual DbSet<JournalMovement> JournalMovements { get; set; }
        public virtual DbSet<JournalMovementHistory> JournalMovementHistories { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Lookup> Lookups { get; set; }
        public virtual DbSet<LookupType> LookupTypes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OutStanding> OutStandings { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SalesGroup> SalesGroups { get; set; }
        public virtual DbSet<SalesHistory> SalesHistories { get; set; }
        public virtual DbSet<SalesMappingAccount> SalesMappingAccounts { get; set; }
        public virtual DbSet<SalesMappingAccountPaymentMethod> SalesMappingAccountPaymentMethods { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
    
        [DbFunction("CentralDepKeyStageEntities", "AccountBegingBalance")]
        public virtual IQueryable<AccountBegingBalance_Result> AccountBegingBalance(Nullable<int> iD, Nullable<System.DateTime> date)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AccountBegingBalance_Result>("[CentralDepKeyStageEntities].[AccountBegingBalance](@ID, @Date)", iDParameter, dateParameter);
        }
    
        public virtual int AccountBalanceUpdate(Nullable<int> iD, Nullable<double> debit, Nullable<double> credit)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountBalanceUpdate", iDParameter, debitParameter, creditParameter);
        }
    
        public virtual int AccountDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> AccountInsert(string name, string accountNumber, Nullable<double> debit, Nullable<double> credit, Nullable<double> limit, string description, Nullable<int> staffID, Nullable<int> accountTypeID, Nullable<int> parentID, Nullable<int> branchID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AccountInsert", nameParameter, accountNumberParameter, debitParameter, creditParameter, limitParameter, descriptionParameter, staffIDParameter, accountTypeIDParameter, parentIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<string> AccountSelect(Nullable<int> iD, string name, string accountNumber, Nullable<bool> isDeleted, Nullable<int> staffID, Nullable<int> accountTypeID, Nullable<int> parentID, string description, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<int> branchID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AccountSelect", iDParameter, nameParameter, accountNumberParameter, isDeletedParameter, staffIDParameter, accountTypeIDParameter, parentIDParameter, descriptionParameter, pageNumberParameter, pageSizeParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AccountSelectDC_Result> AccountSelectDC(Nullable<int> iD, Nullable<System.DateTime> date)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountSelectDC_Result>("AccountSelectDC", iDParameter, dateParameter);
        }
    
        public virtual ObjectResult<AccountSelectWithSub_Result> AccountSelectWithSub(Nullable<int> iD, string name, string accountNumber, Nullable<bool> isDeleted, Nullable<int> staffID, Nullable<int> accountTypeID, Nullable<int> parentID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountSelectWithSub_Result>("AccountSelectWithSub", iDParameter, nameParameter, accountNumberParameter, isDeletedParameter, staffIDParameter, accountTypeIDParameter, parentIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int AccountUpdate(Nullable<int> iD, string name, string accountNumber, Nullable<double> debit, Nullable<double> credit, Nullable<double> limit, string description, Nullable<int> staffID, Nullable<int> accountTypeID, Nullable<int> parentID, Nullable<int> branchID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountUpdate", iDParameter, nameParameter, accountNumberParameter, debitParameter, creditParameter, limitParameter, descriptionParameter, staffIDParameter, accountTypeIDParameter, parentIDParameter, branchIDParameter);
        }
    
        public virtual int AirlineDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AirlineDelete", iDParameter);
        }
    
        public virtual int AirlineInsert(string name, string sabreCode, string iATACode, string code)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sabreCodeParameter = sabreCode != null ?
                new ObjectParameter("SabreCode", sabreCode) :
                new ObjectParameter("SabreCode", typeof(string));
    
            var iATACodeParameter = iATACode != null ?
                new ObjectParameter("IATACode", iATACode) :
                new ObjectParameter("IATACode", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AirlineInsert", nameParameter, sabreCodeParameter, iATACodeParameter, codeParameter);
        }
    
        public virtual ObjectResult<AirlineSelect_Result> AirlineSelect(Nullable<int> iD, string name, string sabreCode, string iATACode, string code, Nullable<bool> isDeleted, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sabreCodeParameter = sabreCode != null ?
                new ObjectParameter("SabreCode", sabreCode) :
                new ObjectParameter("SabreCode", typeof(string));
    
            var iATACodeParameter = iATACode != null ?
                new ObjectParameter("IATACode", iATACode) :
                new ObjectParameter("IATACode", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AirlineSelect_Result>("AirlineSelect", iDParameter, nameParameter, sabreCodeParameter, iATACodeParameter, codeParameter, isDeletedParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int AirlineUpdate(Nullable<int> iD, string name, string sabreCode, string iATACode, string code)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sabreCodeParameter = sabreCode != null ?
                new ObjectParameter("SabreCode", sabreCode) :
                new ObjectParameter("SabreCode", typeof(string));
    
            var iATACodeParameter = iATACode != null ?
                new ObjectParameter("IATACode", iATACode) :
                new ObjectParameter("IATACode", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AirlineUpdate", iDParameter, nameParameter, sabreCodeParameter, iATACodeParameter, codeParameter);
        }
    
        public virtual int BranchDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchDelete", iDParameter);
        }
    
        public virtual int BranchInsert(string name, string telephone, string address)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchInsert", nameParameter, telephoneParameter, addressParameter);
        }
    
        public virtual ObjectResult<BranchSelect_Result> BranchSelect(Nullable<int> iD, string name, Nullable<bool> isDeleted, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BranchSelect_Result>("BranchSelect", iDParameter, nameParameter, isDeletedParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int BranchUpdate(Nullable<int> iD, string name, string telephone, string address)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchUpdate", iDParameter, nameParameter, telephoneParameter, addressParameter);
        }
    
        public virtual ObjectResult<DashboardGetProfit_Result> DashboardGetProfit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DashboardGetProfit_Result>("DashboardGetProfit");
        }
    
        public virtual ObjectResult<DashboardGetSalesCounts_Result> DashboardGetSalesCounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DashboardGetSalesCounts_Result>("DashboardGetSalesCounts");
        }
    
        public virtual ObjectResult<DashboardGetSalesStatistics_Result> DashboardGetSalesStatistics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DashboardGetSalesStatistics_Result>("DashboardGetSalesStatistics");
        }
    
        public virtual ObjectResult<DashboardGetStaffAchievements_Result> DashboardGetStaffAchievements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DashboardGetStaffAchievements_Result>("DashboardGetStaffAchievements");
        }
    
        public virtual int JournalDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> JournalInsert(Nullable<int> branchID, Nullable<int> staffID, Nullable<int> journalTypeID, Nullable<int> salesID, Nullable<int> salesStatusID, Nullable<System.DateTime> journalDate)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var journalTypeIDParameter = journalTypeID.HasValue ?
                new ObjectParameter("JournalTypeID", journalTypeID) :
                new ObjectParameter("JournalTypeID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var salesStatusIDParameter = salesStatusID.HasValue ?
                new ObjectParameter("SalesStatusID", salesStatusID) :
                new ObjectParameter("SalesStatusID", typeof(int));
    
            var journalDateParameter = journalDate.HasValue ?
                new ObjectParameter("JournalDate", journalDate) :
                new ObjectParameter("JournalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("JournalInsert", branchIDParameter, staffIDParameter, journalTypeIDParameter, salesIDParameter, salesStatusIDParameter, journalDateParameter);
        }
    
        public virtual int JournalMovementAndHistoryDelete(Nullable<int> journalID)
        {
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalMovementAndHistoryDelete", journalIDParameter);
        }
    
        public virtual int JournalMovementDelete(Nullable<int> journalID)
        {
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalMovementDelete", journalIDParameter);
        }
    
        public virtual int JournalMovementHistoryInsert(Nullable<int> journalID, Nullable<int> journalMovementID, Nullable<int> accountID, Nullable<int> approvalStatusID, Nullable<double> debit, Nullable<double> credit, string movementDescription, Nullable<bool> isDeleted, Nullable<System.DateTime> creationDate)
        {
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            var journalMovementIDParameter = journalMovementID.HasValue ?
                new ObjectParameter("JournalMovementID", journalMovementID) :
                new ObjectParameter("JournalMovementID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var approvalStatusIDParameter = approvalStatusID.HasValue ?
                new ObjectParameter("ApprovalStatusID", approvalStatusID) :
                new ObjectParameter("ApprovalStatusID", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var movementDescriptionParameter = movementDescription != null ?
                new ObjectParameter("MovementDescription", movementDescription) :
                new ObjectParameter("MovementDescription", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalMovementHistoryInsert", journalIDParameter, journalMovementIDParameter, accountIDParameter, approvalStatusIDParameter, debitParameter, creditParameter, movementDescriptionParameter, isDeletedParameter, creationDateParameter);
        }
    
        public virtual ObjectResult<JournalMovementHistorySelect_Result> JournalMovementHistorySelect(Nullable<int> iD, Nullable<int> journalID, Nullable<int> accountID, Nullable<bool> isDeleted, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateto, Nullable<int> journalNumber, string movementDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("Dateto", dateto) :
                new ObjectParameter("Dateto", typeof(System.DateTime));
    
            var journalNumberParameter = journalNumber.HasValue ?
                new ObjectParameter("JournalNumber", journalNumber) :
                new ObjectParameter("JournalNumber", typeof(int));
    
            var movementDescriptionParameter = movementDescription != null ?
                new ObjectParameter("MovementDescription", movementDescription) :
                new ObjectParameter("MovementDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalMovementHistorySelect_Result>("JournalMovementHistorySelect", iDParameter, journalIDParameter, accountIDParameter, isDeletedParameter, dateFromParameter, datetoParameter, journalNumberParameter, movementDescriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> JournalMovementHistoryUpdate(Nullable<int> iD, Nullable<int> accountID, string movementDescription, Nullable<double> debit, Nullable<double> credit, Nullable<int> approvalStatusID, Nullable<bool> isDeleted, Nullable<int> journalID, string rejectionReason, string journalMovementID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var movementDescriptionParameter = movementDescription != null ?
                new ObjectParameter("MovementDescription", movementDescription) :
                new ObjectParameter("MovementDescription", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var approvalStatusIDParameter = approvalStatusID.HasValue ?
                new ObjectParameter("ApprovalStatusID", approvalStatusID) :
                new ObjectParameter("ApprovalStatusID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            var rejectionReasonParameter = rejectionReason != null ?
                new ObjectParameter("RejectionReason", rejectionReason) :
                new ObjectParameter("RejectionReason", typeof(string));
    
            var journalMovementIDParameter = journalMovementID != null ?
                new ObjectParameter("JournalMovementID", journalMovementID) :
                new ObjectParameter("JournalMovementID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("JournalMovementHistoryUpdate", iDParameter, accountIDParameter, movementDescriptionParameter, debitParameter, creditParameter, approvalStatusIDParameter, isDeletedParameter, journalIDParameter, rejectionReasonParameter, journalMovementIDParameter);
        }
    
        public virtual int JournalMovementInsert(Nullable<int> journalID, Nullable<int> accountID, string movementDescription, Nullable<double> debit, Nullable<double> credit, Nullable<System.DateTime> creationDate)
        {
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var movementDescriptionParameter = movementDescription != null ?
                new ObjectParameter("MovementDescription", movementDescription) :
                new ObjectParameter("MovementDescription", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalMovementInsert", journalIDParameter, accountIDParameter, movementDescriptionParameter, debitParameter, creditParameter, creationDateParameter);
        }
    
        public virtual ObjectResult<JournalMovementSelect_Result> JournalMovementSelect(Nullable<int> iD, Nullable<int> journalID, Nullable<int> accountID, Nullable<bool> isDeleted, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateto, Nullable<int> journalNumber, string movementDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("Dateto", dateto) :
                new ObjectParameter("Dateto", typeof(System.DateTime));
    
            var journalNumberParameter = journalNumber.HasValue ?
                new ObjectParameter("JournalNumber", journalNumber) :
                new ObjectParameter("JournalNumber", typeof(int));
    
            var movementDescriptionParameter = movementDescription != null ?
                new ObjectParameter("MovementDescription", movementDescription) :
                new ObjectParameter("MovementDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalMovementSelect_Result>("JournalMovementSelect", iDParameter, journalIDParameter, accountIDParameter, isDeletedParameter, dateFromParameter, datetoParameter, journalNumberParameter, movementDescriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> JournalMovementUpdate(Nullable<int> iD, Nullable<int> accountID, string movementDescription, Nullable<double> debit, Nullable<double> credit, Nullable<bool> isDeleted, Nullable<int> journalID, string journalMovementID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var movementDescriptionParameter = movementDescription != null ?
                new ObjectParameter("MovementDescription", movementDescription) :
                new ObjectParameter("MovementDescription", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            var journalMovementIDParameter = journalMovementID != null ?
                new ObjectParameter("JournalMovementID", journalMovementID) :
                new ObjectParameter("JournalMovementID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("JournalMovementUpdate", iDParameter, accountIDParameter, movementDescriptionParameter, debitParameter, creditParameter, isDeletedParameter, journalIDParameter, journalMovementIDParameter);
        }
    
        public virtual ObjectResult<JournalSelect_Result> JournalSelect(Nullable<int> iD, Nullable<int> journalNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateto, Nullable<int> journalTypeID, Nullable<int> staffID, Nullable<int> branchID, Nullable<int> salesID, Nullable<System.DateTime> journalDate, Nullable<bool> isDeleted, Nullable<int> approvalStatusID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var journalNumberParameter = journalNumber.HasValue ?
                new ObjectParameter("JournalNumber", journalNumber) :
                new ObjectParameter("JournalNumber", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("Dateto", dateto) :
                new ObjectParameter("Dateto", typeof(System.DateTime));
    
            var journalTypeIDParameter = journalTypeID.HasValue ?
                new ObjectParameter("JournalTypeID", journalTypeID) :
                new ObjectParameter("JournalTypeID", typeof(int));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var journalDateParameter = journalDate.HasValue ?
                new ObjectParameter("JournalDate", journalDate) :
                new ObjectParameter("JournalDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var approvalStatusIDParameter = approvalStatusID.HasValue ?
                new ObjectParameter("ApprovalStatusID", approvalStatusID) :
                new ObjectParameter("ApprovalStatusID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalSelect_Result>("JournalSelect", iDParameter, journalNumberParameter, dateFromParameter, datetoParameter, journalTypeIDParameter, staffIDParameter, branchIDParameter, salesIDParameter, journalDateParameter, isDeletedParameter, approvalStatusIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int JournalUpdate(Nullable<int> iD, Nullable<System.DateTime> journalDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var journalDateParameter = journalDate.HasValue ?
                new ObjectParameter("JournalDate", journalDate) :
                new ObjectParameter("JournalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalUpdate", iDParameter, journalDateParameter);
        }
    
        public virtual int LogInsert(string details, Nullable<int> action, Nullable<int> relatedID, Nullable<int> staffID, Nullable<int> type)
        {
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var relatedIDParameter = relatedID.HasValue ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(int));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogInsert", detailsParameter, actionParameter, relatedIDParameter, staffIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<LogSelect_Result> LogSelect(Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> action, Nullable<int> relatedID, Nullable<int> staffID, Nullable<int> type, string ticketNumber)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var relatedIDParameter = relatedID.HasValue ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(int));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogSelect_Result>("LogSelect", pageNumberParameter, pageSizeParameter, dateFromParameter, dateToParameter, actionParameter, relatedIDParameter, staffIDParameter, typeParameter, ticketNumberParameter);
        }
    
        public virtual int LookupDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LookupDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> LookupInsert(string title, string note, Nullable<int> lookupOrder, Nullable<int> lookupTypeID)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var lookupOrderParameter = lookupOrder.HasValue ?
                new ObjectParameter("LookupOrder", lookupOrder) :
                new ObjectParameter("LookupOrder", typeof(int));
    
            var lookupTypeIDParameter = lookupTypeID.HasValue ?
                new ObjectParameter("LookupTypeID", lookupTypeID) :
                new ObjectParameter("LookupTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LookupInsert", titleParameter, noteParameter, lookupOrderParameter, lookupTypeIDParameter);
        }
    
        public virtual ObjectResult<LookupSelect_Result> LookupSelect(Nullable<int> iD, string title, string note, Nullable<bool> isDeleted, Nullable<int> lookupOrder, Nullable<int> lookupTypeID, Nullable<int> relatedID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var lookupOrderParameter = lookupOrder.HasValue ?
                new ObjectParameter("LookupOrder", lookupOrder) :
                new ObjectParameter("LookupOrder", typeof(int));
    
            var lookupTypeIDParameter = lookupTypeID.HasValue ?
                new ObjectParameter("LookupTypeID", lookupTypeID) :
                new ObjectParameter("LookupTypeID", typeof(int));
    
            var relatedIDParameter = relatedID.HasValue ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LookupSelect_Result>("LookupSelect", iDParameter, titleParameter, noteParameter, isDeletedParameter, lookupOrderParameter, lookupTypeIDParameter, relatedIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int LookupTypeDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LookupTypeDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> LookupTypeInsert(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LookupTypeInsert", titleParameter);
        }
    
        public virtual ObjectResult<LookupTypeSelect_Result> LookupTypeSelect(Nullable<int> iD, string title, Nullable<bool> isDeleted, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LookupTypeSelect_Result>("LookupTypeSelect", iDParameter, titleParameter, isDeletedParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int LookupTypeUpdate(Nullable<int> iD, string title)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LookupTypeUpdate", iDParameter, titleParameter);
        }
    
        public virtual int LookupUpdate(Nullable<int> iD, string title, string note, Nullable<int> lookupOrder, Nullable<int> lookupTypeID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var lookupOrderParameter = lookupOrder.HasValue ?
                new ObjectParameter("LookupOrder", lookupOrder) :
                new ObjectParameter("LookupOrder", typeof(int));
    
            var lookupTypeIDParameter = lookupTypeID.HasValue ?
                new ObjectParameter("LookupTypeID", lookupTypeID) :
                new ObjectParameter("LookupTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LookupUpdate", iDParameter, titleParameter, noteParameter, lookupOrderParameter, lookupTypeIDParameter);
        }
    
        public virtual int MappedAccountSelect(Nullable<int> salesTypeID, Nullable<int> paymentMethodID, Nullable<int> accountID, Nullable<bool> credit, Nullable<bool> debit, Nullable<bool> cost, Nullable<bool> sales, Nullable<bool> isRefund, Nullable<int> branchID)
        {
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(bool));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(bool));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(bool));
    
            var salesParameter = sales.HasValue ?
                new ObjectParameter("Sales", sales) :
                new ObjectParameter("Sales", typeof(bool));
    
            var isRefundParameter = isRefund.HasValue ?
                new ObjectParameter("IsRefund", isRefund) :
                new ObjectParameter("IsRefund", typeof(bool));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MappedAccountSelect", salesTypeIDParameter, paymentMethodIDParameter, accountIDParameter, creditParameter, debitParameter, costParameter, salesParameter, isRefundParameter, branchIDParameter);
        }
    
        public virtual int NotificationInsert(string description, Nullable<int> relatedID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var relatedIDParameter = relatedID.HasValue ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationInsert", descriptionParameter, relatedIDParameter);
        }
    
        public virtual ObjectResult<NotificationNotSeenCount_Result> NotificationNotSeenCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationNotSeenCount_Result>("NotificationNotSeenCount");
        }
    
        public virtual ObjectResult<string> NotificationSelect(Nullable<int> relatedID, Nullable<bool> isSeen)
        {
            var relatedIDParameter = relatedID.HasValue ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(int));
    
            var isSeenParameter = isSeen.HasValue ?
                new ObjectParameter("IsSeen", isSeen) :
                new ObjectParameter("IsSeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("NotificationSelect", relatedIDParameter, isSeenParameter);
        }
    
        public virtual int NotificationUpdate(Nullable<int> relatedID)
        {
            var relatedIDParameter = relatedID.HasValue ?
                new ObjectParameter("RelatedID", relatedID) :
                new ObjectParameter("RelatedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationUpdate", relatedIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> OutStandingInsert(Nullable<int> osNumber, Nullable<double> amount, Nullable<int> statusID, Nullable<int> journalMovementID)
        {
            var osNumberParameter = osNumber.HasValue ?
                new ObjectParameter("OsNumber", osNumber) :
                new ObjectParameter("OsNumber", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var journalMovementIDParameter = journalMovementID.HasValue ?
                new ObjectParameter("JournalMovementID", journalMovementID) :
                new ObjectParameter("JournalMovementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("OutStandingInsert", osNumberParameter, amountParameter, statusIDParameter, journalMovementIDParameter);
        }
    
        public virtual ObjectResult<OutStandingSelect_Result> OutStandingSelect(Nullable<int> accountID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OutStandingSelect_Result>("OutStandingSelect", accountIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> OutStandingSelectMaxOsNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("OutStandingSelectMaxOsNumber");
        }
    
        public virtual ObjectResult<OutStandingSelectPartial_Result> OutStandingSelectPartial(Nullable<int> journalMovementID)
        {
            var journalMovementIDParameter = journalMovementID.HasValue ?
                new ObjectParameter("JournalMovementID", journalMovementID) :
                new ObjectParameter("JournalMovementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OutStandingSelectPartial_Result>("OutStandingSelectPartial", journalMovementIDParameter);
        }
    
        public virtual int RptJournalsSendEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RptJournalsSendEmail");
        }
    
        public virtual ObjectResult<RptSalesPerPNRReport_Result> RptSalesPerPNRReport(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted, string pNR, Nullable<int> salesTypeID)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var pNRParameter = pNR != null ?
                new ObjectParameter("PNR", pNR) :
                new ObjectParameter("PNR", typeof(string));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesPerPNRReport_Result>("RptSalesPerPNRReport", dateFromParameter, dateToParameter, isDeletedParameter, pNRParameter, salesTypeIDParameter);
        }
    
        public virtual ObjectResult<RptSalesSelectForAirLine_Result> RptSalesSelectForAirLine(Nullable<int> airlineID, Nullable<int> staffID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted)
        {
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesSelectForAirLine_Result>("RptSalesSelectForAirLine", airlineIDParameter, staffIDParameter, dateFromParameter, dateToParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<RptSalesSelectForDailySales_Result> RptSalesSelectForDailySales(string ticketNumber, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> salesTypeID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted, string vendor)
        {
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesSelectForDailySales_Result>("RptSalesSelectForDailySales", ticketNumberParameter, airlineIDParameter, createdStaffIDParameter, salesTypeIDParameter, dateFromParameter, dateToParameter, isDeletedParameter, vendorParameter);
        }
    
        public virtual ObjectResult<RptSalesSelectForExpensesOrIncome_Result> RptSalesSelectForExpensesOrIncome(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted, string expensesORIncome)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var expensesORIncomeParameter = expensesORIncome != null ?
                new ObjectParameter("ExpensesORIncome", expensesORIncome) :
                new ObjectParameter("ExpensesORIncome", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesSelectForExpensesOrIncome_Result>("RptSalesSelectForExpensesOrIncome", dateFromParameter, dateToParameter, isDeletedParameter, expensesORIncomeParameter);
        }
    
        public virtual ObjectResult<RptSalesSelectForProfit_Result> RptSalesSelectForProfit(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesSelectForProfit_Result>("RptSalesSelectForProfit", dateFromParameter, dateToParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<RptSalesSelectForSales_Result> RptSalesSelectForSales(string ticketNumber, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> salesTypeID, Nullable<int> accountID, Nullable<int> subAccountID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted)
        {
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var subAccountIDParameter = subAccountID.HasValue ?
                new ObjectParameter("SubAccountID", subAccountID) :
                new ObjectParameter("SubAccountID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesSelectForSales_Result>("RptSalesSelectForSales", ticketNumberParameter, airlineIDParameter, createdStaffIDParameter, salesTypeIDParameter, accountIDParameter, subAccountIDParameter, dateFromParameter, dateToParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<RptSalesSelectForStaffTotalSalesReport_Result> RptSalesSelectForStaffTotalSalesReport(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> createdStaffID)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesSelectForStaffTotalSalesReport_Result>("RptSalesSelectForStaffTotalSalesReport", dateFromParameter, dateToParameter, createdStaffIDParameter);
        }
    
        public virtual ObjectResult<RptSalesSelectForTotalAirLine_Result> RptSalesSelectForTotalAirLine(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptSalesSelectForTotalAirLine_Result>("RptSalesSelectForTotalAirLine", dateFromParameter, dateToParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<RptTrialBalanceReport_Result> RptTrialBalanceReport(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptTrialBalanceReport_Result>("RptTrialBalanceReport", dateFromParameter, dateToParameter);
        }
    
        public virtual int SalesDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesDelete", iDParameter);
        }
    
        public virtual int SalesGroupDelete(Nullable<int> saleID, Nullable<int> invoiceNumber)
        {
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesGroupDelete", saleIDParameter, invoiceNumberParameter);
        }
    
        public virtual int SalesGroupInsert(Nullable<int> saleID, Nullable<int> invoiceNumber)
        {
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesGroupInsert", saleIDParameter, invoiceNumberParameter);
        }
    
        public virtual ObjectResult<SalesGroupSelect_Result> SalesGroupSelect(Nullable<int> invoiceNumber)
        {
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesGroupSelect_Result>("SalesGroupSelect", invoiceNumberParameter);
        }
    
        public virtual int SalesHistoryDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesHistoryDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SalesHistoryInsert(string ticketNumber, string cardNumber, string paxName, string remarks, string destination, string pNR, Nullable<double> fare, Nullable<double> tax, Nullable<double> totalCost, Nullable<double> salesAmount, Nullable<double> profit, Nullable<double> cash, Nullable<double> credit, Nullable<double> visa, Nullable<double> advance, Nullable<double> card, Nullable<double> complementary, Nullable<double> commision, Nullable<long> dKNumber, Nullable<int> invoiceNumber, Nullable<int> invoiceNumberPNR, Nullable<int> salesTypeID, Nullable<int> paymentMethodID, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> accountantStaffID, Nullable<int> accountID, Nullable<int> subAccountID, Nullable<int> branchID, Nullable<int> salesStatusID, Nullable<int> saleID, Nullable<int> parentID, Nullable<int> recievableMainAccountID, Nullable<int> creditAccountID, Nullable<int> historyCreatedStaffID, Nullable<int> bankAccountID, string refRemarks, string refDescription, Nullable<System.DateTime> creationDate)
        {
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var paxNameParameter = paxName != null ?
                new ObjectParameter("PaxName", paxName) :
                new ObjectParameter("PaxName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var pNRParameter = pNR != null ?
                new ObjectParameter("PNR", pNR) :
                new ObjectParameter("PNR", typeof(string));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(double));
    
            var salesAmountParameter = salesAmount.HasValue ?
                new ObjectParameter("SalesAmount", salesAmount) :
                new ObjectParameter("SalesAmount", typeof(double));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(double));
    
            var cashParameter = cash.HasValue ?
                new ObjectParameter("Cash", cash) :
                new ObjectParameter("Cash", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var visaParameter = visa.HasValue ?
                new ObjectParameter("Visa", visa) :
                new ObjectParameter("Visa", typeof(double));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(double));
    
            var cardParameter = card.HasValue ?
                new ObjectParameter("Card", card) :
                new ObjectParameter("Card", typeof(double));
    
            var complementaryParameter = complementary.HasValue ?
                new ObjectParameter("Complementary", complementary) :
                new ObjectParameter("Complementary", typeof(double));
    
            var commisionParameter = commision.HasValue ?
                new ObjectParameter("Commision", commision) :
                new ObjectParameter("Commision", typeof(double));
    
            var dKNumberParameter = dKNumber.HasValue ?
                new ObjectParameter("DKNumber", dKNumber) :
                new ObjectParameter("DKNumber", typeof(long));
    
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            var invoiceNumberPNRParameter = invoiceNumberPNR.HasValue ?
                new ObjectParameter("InvoiceNumberPNR", invoiceNumberPNR) :
                new ObjectParameter("InvoiceNumberPNR", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var accountantStaffIDParameter = accountantStaffID.HasValue ?
                new ObjectParameter("AccountantStaffID", accountantStaffID) :
                new ObjectParameter("AccountantStaffID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var subAccountIDParameter = subAccountID.HasValue ?
                new ObjectParameter("SubAccountID", subAccountID) :
                new ObjectParameter("SubAccountID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var salesStatusIDParameter = salesStatusID.HasValue ?
                new ObjectParameter("SalesStatusID", salesStatusID) :
                new ObjectParameter("SalesStatusID", typeof(int));
    
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var recievableMainAccountIDParameter = recievableMainAccountID.HasValue ?
                new ObjectParameter("RecievableMainAccountID", recievableMainAccountID) :
                new ObjectParameter("RecievableMainAccountID", typeof(int));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var historyCreatedStaffIDParameter = historyCreatedStaffID.HasValue ?
                new ObjectParameter("HistoryCreatedStaffID", historyCreatedStaffID) :
                new ObjectParameter("HistoryCreatedStaffID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var refRemarksParameter = refRemarks != null ?
                new ObjectParameter("RefRemarks", refRemarks) :
                new ObjectParameter("RefRemarks", typeof(string));
    
            var refDescriptionParameter = refDescription != null ?
                new ObjectParameter("RefDescription", refDescription) :
                new ObjectParameter("RefDescription", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SalesHistoryInsert", ticketNumberParameter, cardNumberParameter, paxNameParameter, remarksParameter, destinationParameter, pNRParameter, fareParameter, taxParameter, totalCostParameter, salesAmountParameter, profitParameter, cashParameter, creditParameter, visaParameter, advanceParameter, cardParameter, complementaryParameter, commisionParameter, dKNumberParameter, invoiceNumberParameter, invoiceNumberPNRParameter, salesTypeIDParameter, paymentMethodIDParameter, airlineIDParameter, createdStaffIDParameter, accountantStaffIDParameter, accountIDParameter, subAccountIDParameter, branchIDParameter, salesStatusIDParameter, saleIDParameter, parentIDParameter, recievableMainAccountIDParameter, creditAccountIDParameter, historyCreatedStaffIDParameter, bankAccountIDParameter, refRemarksParameter, refDescriptionParameter, creationDateParameter);
        }
    
        public virtual ObjectResult<SalesHistorySelect_Result> SalesHistorySelect(Nullable<int> iD, string paxName, string pNR, Nullable<long> dKNumber, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> salesTypeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isDeleted, Nullable<int> branchID, Nullable<int> pageNumber, Nullable<int> pageSize, string ticketNumber, Nullable<int> historyCreatedStaffID, Nullable<int> approveStatusID, Nullable<System.DateTime> transferDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var paxNameParameter = paxName != null ?
                new ObjectParameter("PaxName", paxName) :
                new ObjectParameter("PaxName", typeof(string));
    
            var pNRParameter = pNR != null ?
                new ObjectParameter("PNR", pNR) :
                new ObjectParameter("PNR", typeof(string));
    
            var dKNumberParameter = dKNumber.HasValue ?
                new ObjectParameter("DKNumber", dKNumber) :
                new ObjectParameter("DKNumber", typeof(long));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var historyCreatedStaffIDParameter = historyCreatedStaffID.HasValue ?
                new ObjectParameter("HistoryCreatedStaffID", historyCreatedStaffID) :
                new ObjectParameter("HistoryCreatedStaffID", typeof(int));
    
            var approveStatusIDParameter = approveStatusID.HasValue ?
                new ObjectParameter("ApproveStatusID", approveStatusID) :
                new ObjectParameter("ApproveStatusID", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesHistorySelect_Result>("SalesHistorySelect", iDParameter, paxNameParameter, pNRParameter, dKNumberParameter, airlineIDParameter, createdStaffIDParameter, salesTypeIDParameter, fromDateParameter, toDateParameter, isDeletedParameter, branchIDParameter, pageNumberParameter, pageSizeParameter, ticketNumberParameter, historyCreatedStaffIDParameter, approveStatusIDParameter, transferDateParameter);
        }
    
        public virtual int SalesHistoryUpdate(Nullable<int> iD, string ticketNumber, string cardNumber, string paxName, string remarks, string destination, string pNR, Nullable<double> fare, Nullable<double> tax, Nullable<double> totalCost, Nullable<double> salesAmount, Nullable<double> profit, Nullable<double> cash, Nullable<double> credit, Nullable<double> visa, Nullable<double> advance, Nullable<double> card, Nullable<double> complementary, Nullable<double> commision, Nullable<long> dKNumber, Nullable<int> invoiceNumber, Nullable<int> invoiceNumberPNR, Nullable<int> salesTypeID, Nullable<int> paymentMethodID, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> accountantStaffID, Nullable<int> accountID, Nullable<int> subAccountID, Nullable<int> branchID, Nullable<int> salesStatusID, string rejectionReason, Nullable<int> approveStatusID, Nullable<int> saleID, Nullable<int> parentID, Nullable<int> recievableMainAccountID, Nullable<int> creditAccountID, Nullable<int> bankAccountID, Nullable<double> refAmountToCustomer, string refRemarks, string refDescription, Nullable<System.DateTime> creationDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var paxNameParameter = paxName != null ?
                new ObjectParameter("PaxName", paxName) :
                new ObjectParameter("PaxName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var pNRParameter = pNR != null ?
                new ObjectParameter("PNR", pNR) :
                new ObjectParameter("PNR", typeof(string));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(double));
    
            var salesAmountParameter = salesAmount.HasValue ?
                new ObjectParameter("SalesAmount", salesAmount) :
                new ObjectParameter("SalesAmount", typeof(double));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(double));
    
            var cashParameter = cash.HasValue ?
                new ObjectParameter("Cash", cash) :
                new ObjectParameter("Cash", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var visaParameter = visa.HasValue ?
                new ObjectParameter("Visa", visa) :
                new ObjectParameter("Visa", typeof(double));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(double));
    
            var cardParameter = card.HasValue ?
                new ObjectParameter("Card", card) :
                new ObjectParameter("Card", typeof(double));
    
            var complementaryParameter = complementary.HasValue ?
                new ObjectParameter("Complementary", complementary) :
                new ObjectParameter("Complementary", typeof(double));
    
            var commisionParameter = commision.HasValue ?
                new ObjectParameter("Commision", commision) :
                new ObjectParameter("Commision", typeof(double));
    
            var dKNumberParameter = dKNumber.HasValue ?
                new ObjectParameter("DKNumber", dKNumber) :
                new ObjectParameter("DKNumber", typeof(long));
    
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            var invoiceNumberPNRParameter = invoiceNumberPNR.HasValue ?
                new ObjectParameter("InvoiceNumberPNR", invoiceNumberPNR) :
                new ObjectParameter("InvoiceNumberPNR", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var accountantStaffIDParameter = accountantStaffID.HasValue ?
                new ObjectParameter("AccountantStaffID", accountantStaffID) :
                new ObjectParameter("AccountantStaffID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var subAccountIDParameter = subAccountID.HasValue ?
                new ObjectParameter("SubAccountID", subAccountID) :
                new ObjectParameter("SubAccountID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var salesStatusIDParameter = salesStatusID.HasValue ?
                new ObjectParameter("SalesStatusID", salesStatusID) :
                new ObjectParameter("SalesStatusID", typeof(int));
    
            var rejectionReasonParameter = rejectionReason != null ?
                new ObjectParameter("RejectionReason", rejectionReason) :
                new ObjectParameter("RejectionReason", typeof(string));
    
            var approveStatusIDParameter = approveStatusID.HasValue ?
                new ObjectParameter("ApproveStatusID", approveStatusID) :
                new ObjectParameter("ApproveStatusID", typeof(int));
    
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var recievableMainAccountIDParameter = recievableMainAccountID.HasValue ?
                new ObjectParameter("RecievableMainAccountID", recievableMainAccountID) :
                new ObjectParameter("RecievableMainAccountID", typeof(int));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var refAmountToCustomerParameter = refAmountToCustomer.HasValue ?
                new ObjectParameter("RefAmountToCustomer", refAmountToCustomer) :
                new ObjectParameter("RefAmountToCustomer", typeof(double));
    
            var refRemarksParameter = refRemarks != null ?
                new ObjectParameter("RefRemarks", refRemarks) :
                new ObjectParameter("RefRemarks", typeof(string));
    
            var refDescriptionParameter = refDescription != null ?
                new ObjectParameter("RefDescription", refDescription) :
                new ObjectParameter("RefDescription", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesHistoryUpdate", iDParameter, ticketNumberParameter, cardNumberParameter, paxNameParameter, remarksParameter, destinationParameter, pNRParameter, fareParameter, taxParameter, totalCostParameter, salesAmountParameter, profitParameter, cashParameter, creditParameter, visaParameter, advanceParameter, cardParameter, complementaryParameter, commisionParameter, dKNumberParameter, invoiceNumberParameter, invoiceNumberPNRParameter, salesTypeIDParameter, paymentMethodIDParameter, airlineIDParameter, createdStaffIDParameter, accountantStaffIDParameter, accountIDParameter, subAccountIDParameter, branchIDParameter, salesStatusIDParameter, rejectionReasonParameter, approveStatusIDParameter, saleIDParameter, parentIDParameter, recievableMainAccountIDParameter, creditAccountIDParameter, bankAccountIDParameter, refAmountToCustomerParameter, refRemarksParameter, refDescriptionParameter, creationDateParameter);
        }
    
        public virtual ObjectResult<SalesInsert_Result> SalesInsert(string ticketNumber, string cardNumber, string paxName, string remarks, string destination, string pNR, Nullable<double> fare, Nullable<double> tax, Nullable<double> totalCost, Nullable<double> salesAmount, Nullable<double> profit, Nullable<double> cash, Nullable<double> credit, Nullable<double> visa, Nullable<double> advance, Nullable<double> card, Nullable<double> complementary, Nullable<double> commision, Nullable<long> dKNumber, Nullable<int> invoiceNumberPNR, Nullable<int> salesTypeID, Nullable<int> paymentMethodID, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> accountantStaffID, Nullable<int> accountID, Nullable<int> subAccountID, Nullable<int> branchID, Nullable<int> salesStatusID, Nullable<int> parentID, Nullable<int> recievableMainAccountID, Nullable<int> creditAccountID, Nullable<int> bankAccountID, Nullable<bool> refPaid, Nullable<double> refAmountFromProvider, string refRemarks, string refDescription)
        {
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var paxNameParameter = paxName != null ?
                new ObjectParameter("PaxName", paxName) :
                new ObjectParameter("PaxName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var pNRParameter = pNR != null ?
                new ObjectParameter("PNR", pNR) :
                new ObjectParameter("PNR", typeof(string));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(double));
    
            var salesAmountParameter = salesAmount.HasValue ?
                new ObjectParameter("SalesAmount", salesAmount) :
                new ObjectParameter("SalesAmount", typeof(double));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(double));
    
            var cashParameter = cash.HasValue ?
                new ObjectParameter("Cash", cash) :
                new ObjectParameter("Cash", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var visaParameter = visa.HasValue ?
                new ObjectParameter("Visa", visa) :
                new ObjectParameter("Visa", typeof(double));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(double));
    
            var cardParameter = card.HasValue ?
                new ObjectParameter("Card", card) :
                new ObjectParameter("Card", typeof(double));
    
            var complementaryParameter = complementary.HasValue ?
                new ObjectParameter("Complementary", complementary) :
                new ObjectParameter("Complementary", typeof(double));
    
            var commisionParameter = commision.HasValue ?
                new ObjectParameter("Commision", commision) :
                new ObjectParameter("Commision", typeof(double));
    
            var dKNumberParameter = dKNumber.HasValue ?
                new ObjectParameter("DKNumber", dKNumber) :
                new ObjectParameter("DKNumber", typeof(long));
    
            var invoiceNumberPNRParameter = invoiceNumberPNR.HasValue ?
                new ObjectParameter("InvoiceNumberPNR", invoiceNumberPNR) :
                new ObjectParameter("InvoiceNumberPNR", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var accountantStaffIDParameter = accountantStaffID.HasValue ?
                new ObjectParameter("AccountantStaffID", accountantStaffID) :
                new ObjectParameter("AccountantStaffID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var subAccountIDParameter = subAccountID.HasValue ?
                new ObjectParameter("SubAccountID", subAccountID) :
                new ObjectParameter("SubAccountID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var salesStatusIDParameter = salesStatusID.HasValue ?
                new ObjectParameter("SalesStatusID", salesStatusID) :
                new ObjectParameter("SalesStatusID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var recievableMainAccountIDParameter = recievableMainAccountID.HasValue ?
                new ObjectParameter("RecievableMainAccountID", recievableMainAccountID) :
                new ObjectParameter("RecievableMainAccountID", typeof(int));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var refPaidParameter = refPaid.HasValue ?
                new ObjectParameter("RefPaid", refPaid) :
                new ObjectParameter("RefPaid", typeof(bool));
    
            var refAmountFromProviderParameter = refAmountFromProvider.HasValue ?
                new ObjectParameter("RefAmountFromProvider", refAmountFromProvider) :
                new ObjectParameter("RefAmountFromProvider", typeof(double));
    
            var refRemarksParameter = refRemarks != null ?
                new ObjectParameter("RefRemarks", refRemarks) :
                new ObjectParameter("RefRemarks", typeof(string));
    
            var refDescriptionParameter = refDescription != null ?
                new ObjectParameter("RefDescription", refDescription) :
                new ObjectParameter("RefDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesInsert_Result>("SalesInsert", ticketNumberParameter, cardNumberParameter, paxNameParameter, remarksParameter, destinationParameter, pNRParameter, fareParameter, taxParameter, totalCostParameter, salesAmountParameter, profitParameter, cashParameter, creditParameter, visaParameter, advanceParameter, cardParameter, complementaryParameter, commisionParameter, dKNumberParameter, invoiceNumberPNRParameter, salesTypeIDParameter, paymentMethodIDParameter, airlineIDParameter, createdStaffIDParameter, accountantStaffIDParameter, accountIDParameter, subAccountIDParameter, branchIDParameter, salesStatusIDParameter, parentIDParameter, recievableMainAccountIDParameter, creditAccountIDParameter, bankAccountIDParameter, refPaidParameter, refAmountFromProviderParameter, refRemarksParameter, refDescriptionParameter);
        }
    
        public virtual ObjectResult<SalesMappingAccountPaymentMethodSelect_Result> SalesMappingAccountPaymentMethodSelect(Nullable<int> paymentMethodID)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesMappingAccountPaymentMethodSelect_Result>("SalesMappingAccountPaymentMethodSelect", paymentMethodIDParameter);
        }
    
        public virtual ObjectResult<SalesMappingAccountSelect_Result> SalesMappingAccountSelect(Nullable<int> salesTypeID)
        {
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesMappingAccountSelect_Result>("SalesMappingAccountSelect", salesTypeIDParameter);
        }
    
        public virtual ObjectResult<SalesSelect_Result> SalesSelect(Nullable<int> iD, string paxName, string pNR, Nullable<long> dKNumber, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> salesTypeID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isDeleted, Nullable<int> salesStatusID, Nullable<int> invoiceNumber, string ticketNumber, Nullable<bool> refPaid, Nullable<int> branchID, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<int> notSalesStatusID, Nullable<int> invoiceNumberPNR)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var paxNameParameter = paxName != null ?
                new ObjectParameter("PaxName", paxName) :
                new ObjectParameter("PaxName", typeof(string));
    
            var pNRParameter = pNR != null ?
                new ObjectParameter("PNR", pNR) :
                new ObjectParameter("PNR", typeof(string));
    
            var dKNumberParameter = dKNumber.HasValue ?
                new ObjectParameter("DKNumber", dKNumber) :
                new ObjectParameter("DKNumber", typeof(long));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var salesStatusIDParameter = salesStatusID.HasValue ?
                new ObjectParameter("SalesStatusID", salesStatusID) :
                new ObjectParameter("SalesStatusID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var refPaidParameter = refPaid.HasValue ?
                new ObjectParameter("RefPaid", refPaid) :
                new ObjectParameter("RefPaid", typeof(bool));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var notSalesStatusIDParameter = notSalesStatusID.HasValue ?
                new ObjectParameter("NotSalesStatusID", notSalesStatusID) :
                new ObjectParameter("NotSalesStatusID", typeof(int));
    
            var invoiceNumberPNRParameter = invoiceNumberPNR.HasValue ?
                new ObjectParameter("InvoiceNumberPNR", invoiceNumberPNR) :
                new ObjectParameter("InvoiceNumberPNR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesSelect_Result>("SalesSelect", iDParameter, paxNameParameter, pNRParameter, dKNumberParameter, airlineIDParameter, createdStaffIDParameter, salesTypeIDParameter, dateFromParameter, dateToParameter, isDeletedParameter, salesStatusIDParameter, invoiceNumberParameter, ticketNumberParameter, refPaidParameter, branchIDParameter, pageNumberParameter, pageSizeParameter, notSalesStatusIDParameter, invoiceNumberPNRParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SalesSelectMaxInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SalesSelectMaxInvoice");
        }
    
        public virtual int SalesUpdate(Nullable<int> iD, string ticketNumber, string cardNumber, string paxName, string remarks, string destination, string pNR, Nullable<double> fare, Nullable<double> tax, Nullable<double> totalCost, Nullable<double> salesAmount, Nullable<double> profit, Nullable<double> cash, Nullable<double> credit, Nullable<double> visa, Nullable<double> advance, Nullable<double> card, Nullable<double> complementary, Nullable<double> commision, Nullable<long> dKNumber, Nullable<int> invoiceNumber, Nullable<int> invoiceNumberPNR, Nullable<int> salesTypeID, Nullable<int> paymentMethodID, Nullable<int> airlineID, Nullable<int> createdStaffID, Nullable<int> accountantStaffID, Nullable<int> accountID, Nullable<int> subAccountID, Nullable<int> branchID, Nullable<double> refAmountFromProvider, Nullable<int> salesStatusID, Nullable<int> parentID, Nullable<bool> refPaid, Nullable<int> recievableMainAccountID, Nullable<int> creditAccountID, Nullable<int> bankAccountID, Nullable<double> refAmountToCustomer, string refRemarks, string refDescription, Nullable<System.DateTime> creationDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var paxNameParameter = paxName != null ?
                new ObjectParameter("PaxName", paxName) :
                new ObjectParameter("PaxName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var pNRParameter = pNR != null ?
                new ObjectParameter("PNR", pNR) :
                new ObjectParameter("PNR", typeof(string));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(double));
    
            var salesAmountParameter = salesAmount.HasValue ?
                new ObjectParameter("SalesAmount", salesAmount) :
                new ObjectParameter("SalesAmount", typeof(double));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(double));
    
            var cashParameter = cash.HasValue ?
                new ObjectParameter("Cash", cash) :
                new ObjectParameter("Cash", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var visaParameter = visa.HasValue ?
                new ObjectParameter("Visa", visa) :
                new ObjectParameter("Visa", typeof(double));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(double));
    
            var cardParameter = card.HasValue ?
                new ObjectParameter("Card", card) :
                new ObjectParameter("Card", typeof(double));
    
            var complementaryParameter = complementary.HasValue ?
                new ObjectParameter("Complementary", complementary) :
                new ObjectParameter("Complementary", typeof(double));
    
            var commisionParameter = commision.HasValue ?
                new ObjectParameter("Commision", commision) :
                new ObjectParameter("Commision", typeof(double));
    
            var dKNumberParameter = dKNumber.HasValue ?
                new ObjectParameter("DKNumber", dKNumber) :
                new ObjectParameter("DKNumber", typeof(long));
    
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(int));
    
            var invoiceNumberPNRParameter = invoiceNumberPNR.HasValue ?
                new ObjectParameter("InvoiceNumberPNR", invoiceNumberPNR) :
                new ObjectParameter("InvoiceNumberPNR", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var airlineIDParameter = airlineID.HasValue ?
                new ObjectParameter("AirlineID", airlineID) :
                new ObjectParameter("AirlineID", typeof(int));
    
            var createdStaffIDParameter = createdStaffID.HasValue ?
                new ObjectParameter("CreatedStaffID", createdStaffID) :
                new ObjectParameter("CreatedStaffID", typeof(int));
    
            var accountantStaffIDParameter = accountantStaffID.HasValue ?
                new ObjectParameter("AccountantStaffID", accountantStaffID) :
                new ObjectParameter("AccountantStaffID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var subAccountIDParameter = subAccountID.HasValue ?
                new ObjectParameter("SubAccountID", subAccountID) :
                new ObjectParameter("SubAccountID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var refAmountFromProviderParameter = refAmountFromProvider.HasValue ?
                new ObjectParameter("RefAmountFromProvider", refAmountFromProvider) :
                new ObjectParameter("RefAmountFromProvider", typeof(double));
    
            var salesStatusIDParameter = salesStatusID.HasValue ?
                new ObjectParameter("SalesStatusID", salesStatusID) :
                new ObjectParameter("SalesStatusID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var refPaidParameter = refPaid.HasValue ?
                new ObjectParameter("RefPaid", refPaid) :
                new ObjectParameter("RefPaid", typeof(bool));
    
            var recievableMainAccountIDParameter = recievableMainAccountID.HasValue ?
                new ObjectParameter("RecievableMainAccountID", recievableMainAccountID) :
                new ObjectParameter("RecievableMainAccountID", typeof(int));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var refAmountToCustomerParameter = refAmountToCustomer.HasValue ?
                new ObjectParameter("RefAmountToCustomer", refAmountToCustomer) :
                new ObjectParameter("RefAmountToCustomer", typeof(double));
    
            var refRemarksParameter = refRemarks != null ?
                new ObjectParameter("RefRemarks", refRemarks) :
                new ObjectParameter("RefRemarks", typeof(string));
    
            var refDescriptionParameter = refDescription != null ?
                new ObjectParameter("RefDescription", refDescription) :
                new ObjectParameter("RefDescription", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesUpdate", iDParameter, ticketNumberParameter, cardNumberParameter, paxNameParameter, remarksParameter, destinationParameter, pNRParameter, fareParameter, taxParameter, totalCostParameter, salesAmountParameter, profitParameter, cashParameter, creditParameter, visaParameter, advanceParameter, cardParameter, complementaryParameter, commisionParameter, dKNumberParameter, invoiceNumberParameter, invoiceNumberPNRParameter, salesTypeIDParameter, paymentMethodIDParameter, airlineIDParameter, createdStaffIDParameter, accountantStaffIDParameter, accountIDParameter, subAccountIDParameter, branchIDParameter, refAmountFromProviderParameter, salesStatusIDParameter, parentIDParameter, refPaidParameter, recievableMainAccountIDParameter, creditAccountIDParameter, bankAccountIDParameter, refAmountToCustomerParameter, refRemarksParameter, refDescriptionParameter, creationDateParameter);
        }
    
        public virtual int StaffDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StaffDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> StaffInsert(string name, string username, string password, Nullable<int> branchID, Nullable<int> roleID, string email, string limit, string userPages, string userPermissions)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var limitParameter = limit != null ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(string));
    
            var userPagesParameter = userPages != null ?
                new ObjectParameter("UserPages", userPages) :
                new ObjectParameter("UserPages", typeof(string));
    
            var userPermissionsParameter = userPermissions != null ?
                new ObjectParameter("UserPermissions", userPermissions) :
                new ObjectParameter("UserPermissions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("StaffInsert", nameParameter, usernameParameter, passwordParameter, branchIDParameter, roleIDParameter, emailParameter, limitParameter, userPagesParameter, userPermissionsParameter);
        }
    
        public virtual ObjectResult<StaffSelect_Result> StaffSelect(Nullable<int> iD, string name, string username, string password, Nullable<bool> isDeleted, Nullable<int> branchID, Nullable<int> roleID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StaffSelect_Result>("StaffSelect", iDParameter, nameParameter, usernameParameter, passwordParameter, isDeletedParameter, branchIDParameter, roleIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int StaffUpdate(Nullable<int> iD, string name, string username, string password, Nullable<int> branchID, Nullable<int> roleID, string email, string limit, string userPages, string userPermissions)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var limitParameter = limit != null ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(string));
    
            var userPagesParameter = userPages != null ?
                new ObjectParameter("UserPages", userPages) :
                new ObjectParameter("UserPages", typeof(string));
    
            var userPermissionsParameter = userPermissions != null ?
                new ObjectParameter("UserPermissions", userPermissions) :
                new ObjectParameter("UserPermissions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StaffUpdate", iDParameter, nameParameter, usernameParameter, passwordParameter, branchIDParameter, roleIDParameter, emailParameter, limitParameter, userPagesParameter, userPermissionsParameter);
        }
    
        public virtual int TotalAdvance(string accountNumber)
        {
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TotalAdvance", accountNumberParameter);
        }
    }
}
